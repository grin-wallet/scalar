#include <ThirdParty/Catch2/catch.hpp>

#include <Wallet/Slate.h>

TEST_CASE("Slate::FromJSON")
{
	const std::string sendSlateJSON = "{\"num_participants\":2,\"id\":\"9f652015-11f0-48fe-9e02-c017fb355fe0\",\"tx\":{\"offset\":[199,78,79,45,53,20,201,77,162,167,240,243,157,193,131,123,103,208,119,204,150,85,226,141,41,223,135,56,190,33,173,155],\"body\":{\"inputs\":[{\"features\":\"Plain\",\"commit\":[8,10,232,156,44,94,166,42,107,187,30,143,61,99,136,232,220,144,240,156,109,89,254,252,152,119,228,128,244,124,147,123,9]}],\"outputs\":[{\"features\":\"Plain\",\"commit\":[9,83,95,37,196,49,56,198,10,240,214,233,245,190,164,65,239,33,229,78,44,44,218,132,30,163,134,203,4,13,101,23,195],\"proof\":[108,198,73,214,175,46,86,151,53,247,47,39,167,18,161,250,238,86,75,129,209,126,136,23,252,129,31,41,212,193,209,167,54,70,125,229,35,246,250,156,205,184,85,196,139,168,70,34,25,122,199,66,3,91,182,82,65,208,116,254,126,59,174,114,1,165,107,245,82,178,138,197,174,12,216,39,19,199,219,13,90,135,62,127,25,58,101,190,148,112,185,63,68,148,10,181,44,41,18,45,233,228,39,193,219,126,180,145,72,206,76,117,30,71,103,95,90,8,53,190,73,170,69,0,23,15,166,60,215,211,254,15,120,78,26,80,57,68,128,82,214,215,110,98,49,208,163,140,234,37,165,244,251,248,112,225,21,208,41,248,235,163,36,238,227,41,36,41,139,244,195,69,230,224,153,141,95,221,61,239,188,174,31,99,109,145,139,14,214,75,169,201,125,0,212,146,213,145,90,11,226,220,176,244,163,148,80,130,174,131,150,190,39,79,224,188,94,201,80,124,56,201,77,195,213,197,157,43,205,30,113,13,4,78,20,227,60,244,177,227,111,67,187,212,196,208,85,183,155,163,140,26,68,7,1,160,205,109,239,198,81,59,141,190,63,10,38,59,143,153,253,214,69,74,31,55,252,236,217,203,28,4,87,164,218,80,149,169,8,85,188,90,158,129,73,163,116,29,249,117,18,191,91,67,206,173,28,140,42,205,22,126,247,117,182,212,212,216,27,151,240,233,173,199,215,126,1,249,26,80,94,34,241,48,55,88,126,0,88,134,76,229,201,240,59,93,253,201,139,154,163,123,16,66,0,141,67,179,137,147,49,175,12,112,37,56,246,70,231,165,187,247,43,234,113,168,94,33,245,102,247,186,22,52,228,48,116,117,10,32,62,136,185,132,174,193,252,41,223,179,118,223,43,49,211,31,74,237,237,158,24,22,152,196,41,197,178,145,128,75,3,177,123,62,19,232,59,162,56,49,214,251,100,76,242,177,245,166,47,7,157,88,166,62,250,131,228,226,163,52,68,199,216,66,136,81,139,69,118,100,167,130,46,166,212,131,209,238,182,140,205,125,57,100,122,217,237,254,185,119,103,205,111,207,108,64,192,6,53,232,113,123,125,233,122,128,7,127,80,101,128,249,132,146,49,208,161,171,44,167,32,122,206,138,185,207,60,160,27,64,142,135,119,109,138,15,130,44,32,152,207,14,220,164,108,37,57,227,24,5,137,168,115,172,116,85,164,176,49,245,93,139,158,86,230,134,157,152,62,134,231,144,239,225,14,118,248,85,156,219,142,249,121,15,4,251,15,45,211,53,204,191,94,147,110,85,195,250,60,243,237,174,243,224,159,180,153,70,17,225,160,98,133,138,140,245,160,13,105,58,91,86,21,160,12,22,111,171,161,197,92,230,181,127,56,91,6,209,255,1,207,220,255,188,90,210,58,25,192,26,221,161,82,136,41,159,121,23,206,132,90,109,61,57,187,229,171,72,110,47,169,73,56,67,3,231,74,160,13,205,8,18,208,216,226]}],\"kernels\":[{\"features\":\"HeightLocked\",\"fee\":8000000,\"lock_height\":66381,\"excess\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"excess_sig\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}]}},\"amount\":1250000000,\"fee\":8000000,\"height\":66381,\"lock_height\":66381,\"participant_data\":[{\"id\":0,\"public_blind_excess\":[3,4,129,119,36,140,203,14,85,189,23,50,245,104,54,32,156,84,240,188,226,152,165,30,32,84,178,68,215,188,246,178,104],\"public_nonce\":[3,235,162,173,108,132,44,240,96,147,217,160,197,239,91,172,69,98,198,4,85,177,236,132,131,66,121,63,241,40,237,177,55],\"part_sig\":null,\"message\":null,\"message_sig\":null}],\"version\":1}";

	Json::Value root;
	JsonUtil::Parse(sendSlateJSON, root);

	Slate slate = Slate::FromJSON(root);

	const std::vector<TransactionKernel>& kernels = slate.GetTransaction().GetBody().GetKernels();
	REQUIRE(kernels.size() == 1);
	REQUIRE(kernels.front().GetFee() == 8000000);

	REQUIRE(slate.GetLockHeight() == 66381);
	REQUIRE(slate.GetBlockHeight() == 66381);

	// TODO: Finish verifying
}

TEST_CASE("Slate::ToJSON")
{
	const std::string sendSlateJSON = "{\"num_participants\":2,\"id\":\"9f652015-11f0-48fe-9e02-c017fb355fe0\",\"tx\":{\"offset\":[199,78,79,45,53,20,201,77,162,167,240,243,157,193,131,123,103,208,119,204,150,85,226,141,41,223,135,56,190,33,173,155],\"body\":{\"inputs\":[{\"features\":\"Plain\",\"commit\":[8,10,232,156,44,94,166,42,107,187,30,143,61,99,136,232,220,144,240,156,109,89,254,252,152,119,228,128,244,124,147,123,9]}],\"outputs\":[{\"features\":\"Plain\",\"commit\":[9,83,95,37,196,49,56,198,10,240,214,233,245,190,164,65,239,33,229,78,44,44,218,132,30,163,134,203,4,13,101,23,195],\"proof\":[108,198,73,214,175,46,86,151,53,247,47,39,167,18,161,250,238,86,75,129,209,126,136,23,252,129,31,41,212,193,209,167,54,70,125,229,35,246,250,156,205,184,85,196,139,168,70,34,25,122,199,66,3,91,182,82,65,208,116,254,126,59,174,114,1,165,107,245,82,178,138,197,174,12,216,39,19,199,219,13,90,135,62,127,25,58,101,190,148,112,185,63,68,148,10,181,44,41,18,45,233,228,39,193,219,126,180,145,72,206,76,117,30,71,103,95,90,8,53,190,73,170,69,0,23,15,166,60,215,211,254,15,120,78,26,80,57,68,128,82,214,215,110,98,49,208,163,140,234,37,165,244,251,248,112,225,21,208,41,248,235,163,36,238,227,41,36,41,139,244,195,69,230,224,153,141,95,221,61,239,188,174,31,99,109,145,139,14,214,75,169,201,125,0,212,146,213,145,90,11,226,220,176,244,163,148,80,130,174,131,150,190,39,79,224,188,94,201,80,124,56,201,77,195,213,197,157,43,205,30,113,13,4,78,20,227,60,244,177,227,111,67,187,212,196,208,85,183,155,163,140,26,68,7,1,160,205,109,239,198,81,59,141,190,63,10,38,59,143,153,253,214,69,74,31,55,252,236,217,203,28,4,87,164,218,80,149,169,8,85,188,90,158,129,73,163,116,29,249,117,18,191,91,67,206,173,28,140,42,205,22,126,247,117,182,212,212,216,27,151,240,233,173,199,215,126,1,249,26,80,94,34,241,48,55,88,126,0,88,134,76,229,201,240,59,93,253,201,139,154,163,123,16,66,0,141,67,179,137,147,49,175,12,112,37,56,246,70,231,165,187,247,43,234,113,168,94,33,245,102,247,186,22,52,228,48,116,117,10,32,62,136,185,132,174,193,252,41,223,179,118,223,43,49,211,31,74,237,237,158,24,22,152,196,41,197,178,145,128,75,3,177,123,62,19,232,59,162,56,49,214,251,100,76,242,177,245,166,47,7,157,88,166,62,250,131,228,226,163,52,68,199,216,66,136,81,139,69,118,100,167,130,46,166,212,131,209,238,182,140,205,125,57,100,122,217,237,254,185,119,103,205,111,207,108,64,192,6,53,232,113,123,125,233,122,128,7,127,80,101,128,249,132,146,49,208,161,171,44,167,32,122,206,138,185,207,60,160,27,64,142,135,119,109,138,15,130,44,32,152,207,14,220,164,108,37,57,227,24,5,137,168,115,172,116,85,164,176,49,245,93,139,158,86,230,134,157,152,62,134,231,144,239,225,14,118,248,85,156,219,142,249,121,15,4,251,15,45,211,53,204,191,94,147,110,85,195,250,60,243,237,174,243,224,159,180,153,70,17,225,160,98,133,138,140,245,160,13,105,58,91,86,21,160,12,22,111,171,161,197,92,230,181,127,56,91,6,209,255,1,207,220,255,188,90,210,58,25,192,26,221,161,82,136,41,159,121,23,206,132,90,109,61,57,187,229,171,72,110,47,169,73,56,67,3,231,74,160,13,205,8,18,208,216,226]}],\"kernels\":[{\"features\":\"HeightLocked\",\"fee\":8000000,\"lock_height\":66381,\"excess\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"excess_sig\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}]}},\"amount\":1250000000,\"fee\":8000000,\"height\":66381,\"lock_height\":66381,\"participant_data\":[{\"id\":0,\"public_blind_excess\":[3,4,129,119,36,140,203,14,85,189,23,50,245,104,54,32,156,84,240,188,226,152,165,30,32,84,178,68,215,188,246,178,104],\"public_nonce\":[3,235,162,173,108,132,44,240,96,147,217,160,197,239,91,172,69,98,198,4,85,177,236,132,131,66,121,63,241,40,237,177,55],\"part_sig\":null,\"message\":null,\"message_sig\":null}],\"version\":1}";

	Json::Value root;
	JsonUtil::Parse(sendSlateJSON, root);

	Slate slate = Slate::FromJSON(root);

	const std::string json = slate.ToJSON().toStyledString();

	REQUIRE(root.toStyledString() == json);
}